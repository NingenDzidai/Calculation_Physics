# работа с матрицами 
# Ax = B, задача -- найти вектор x 
# Чтобы решить такую задачу, пользуются методом Гаусса
# Выражение Ax можно переписвть как систему уравнений 
# В каждом уравнении выразим икс, соответствующий номеру уравнения 
# Расмотрим метод Гаусса на примере матрицы 3х3 
'''
[a11 a12 a13][x1] = [b1] -> a11*x1 + a12*x2 + a13*x3 = b1
[a21 a22 a23][x2] = [b2] -> a21*x1 + a22*x2 + a23*x3 = b2
[a31 a32 a33][x3] = [b3] -> a31*x1 + a32*x2 + a33*x3 = b3

Меод Гаусса это приведение метрицы коэффицентов к тругольному виду посредством комбинации строк
'''
# Пишем код
# Создадим функцию, принимающую на вход 2 массива -- массив коэффицентов [A] и результатов [b]
import numpy as np

def Gauss(A, b):
    C = A.copy()
    d = b.copy()
    n = len(d)
    for k in range(C.shape[1]):
        for i in range(k+1, n):
            c = C[i][k]/C[k][k]
            C[i][k] = 0
            for j in range(k+1, n):
                C[i][j] = C[i][j] - c*C[k][j]
    
            d[i] = d[i] - c*d[k]

    x = np.zeros(n)
    x[-1] = d[-1]/C[-1][-1]
    for i in range(n-2, -1, -1):
        s = 0
        for j in range(i+1, n):
            s+= C[i][i] * x[j]
        x[i] = d[i]/C[i][i] - s/C[i][i]
    
    return x 

A = np.array([[1., 2., 1.,], [0., 3, -2.], [1., 1., -1.]])
print(A)
x = np.array([4., 8, 4.])
print(x)
print(Gauss(A, x))